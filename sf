#!/usr/bin/env bash

# sf -- script framework (https://github.com/Deleh/sf)

# Text formatting variables
sftrs=$'\e[0m'
sftbf=$'\e[1m'
sftdim=$'\e[2m'
sftul=$'\e[4m'
sftblk=$'\e[5m'
sftinv=$'\e[7m'
sfthd=$'\e[8m'
sftclr=$'\e[1A\e[K'
sftk=$'\e[30m'
sftr=$'\e[31m'
sftg=$'\e[32m'
sfty=$'\e[33m'
sftb=$'\e[34m'
sftm=$'\e[35m'
sftc=$'\e[36m'
sftw=$'\e[97m'

# Public output functions
function sferr {
    echo "${sftbf}${sftr}ERROR${sftrs} $1"
    [ -z "$2" ] && exit 1
}

function sfwarn {
    echo "${sftbf}${sfty}WARNING${sftrs} $1"
}

# Public input functions
function sfask {
    if [ -n "$2" ]; then
        read -r -p "$1? [${sftbf}y${sftrs}/${sftbf}N${sftrs}] " sfin
        [[ "$sfin" =~ n|N|^$ ]] && sfin=false || sfin=true
    else
        read -r -p "$1? [${sftbf}Y${sftrs}/${sftbf}n${sftrs}] " sfin
        [[ "$sfin" =~ y|Y|^$ ]] && sfin=true || sfin=false
    fi
}

function sfget {
    if [ -n "$2" ]; then
        read -r -p "$1 [${sftbf}$2${sftrs}]: " sfin
    else
        read -r -p "$1: " sfin
    fi
    [ "$sfin" == "" ] && [ "$2" != "" ] && sfin="$2"
}

# Internal error function
function _sferr {
    echo "${sftbf}${sftr}SF PARSE ERROR${sftrs} $1"
    exit 1
}

# Declare variables for parsing
OLDIFS=$IFS
IFS=";"
_sfphead=""
_sfpdesc=""
_sfodesc="  -h, --help;Show this help message\n"
_sfexamples=""
_sfpargs=()
declare -A _sfflags
declare -A _sfargs

# Parse sf arguments
for a in "${sfargs[@]}"; do

    # Get amount of ;
    _sfsubst=${a//";"}
    _sfcount="$(((${#a} - ${#_sfsubst})))"

    if [ $_sfcount -eq 1 ]; then

        # Read positional argument declaration
        read -r -a _sfparsearr <<< "${a}"

        # Add to positional argument arry
        [[ " ${_sfpargs[*]} " =~ " ${_sfparsearr[0]} " ]] && _sferr "'${_sfparsearr[0]}' is already set: $a"
        _sfpargs+=("${_sfparsearr[0]}")

        # Set usage header and description
        _sfphead="$_sfphead ${_sfparsearr[0]}"
        _sfpdesc="$_sfpdesc  ${_sfparsearr[0]};${_sfparsearr[1]}\n"

    # Flags
    elif [ $_sfcount -eq 2 ]; then

        # Read flag declaration
        read -r -a _sfparsearr <<< "${a}"

        # Set mappings
        [ -n "${_sfflags["--${_sfparsearr[0]}"]}" ] && _sferr "'${_sfparsearr[0]}' is already set: $a"
        _sfflags["--${_sfparsearr[0]}"]="${_sfparsearr[0]}"
        [ -n "${_sfflags["-${_sfparsearr[1]}"]}" ] && _sferr "'${_sfparsearr[1]}' is already set: $a"
        _sfflags["-${_sfparsearr[1]}"]="${_sfparsearr[0]}"

        # Set default value
        declare "${_sfparsearr[0]}"=false

        # Set description
        _sfodesc="$_sfodesc  -${_sfparsearr[1]}, --${_sfparsearr[0]};${_sfparsearr[2]}\n"

    # Arguments
    elif [ $_sfcount -eq 4 ]; then

        # Read argument declaration
        read -r -a _sfparsearr <<< "${a}"

        # Set mappings
        [ -n "${_sfargs["--${_sfparsearr[0]}"]}" ] && _sferr "'${_sfparsearr[0]}' is already set: $a"
        _sfargs["--${_sfparsearr[0]}"]="${_sfparsearr[0]}"
        [ -n "${_sfargs["-${_sfparsearr[1]}"]}" ] && _sferr "'${_sfparsearr[1]}' is already set: $a"
        _sfargs["-${_sfparsearr[1]}"]="${_sfparsearr[0]}"

        # Set default value
        declare "${_sfparsearr[0]}"="${_sfparsearr[3]}"

        # Set description
        _sfodesc="$_sfodesc  -${_sfparsearr[1]}, --${_sfparsearr[0]} ${_sfparsearr[2]};${_sfparsearr[4]} (default: ${_sfparsearr[3]})\n"

    else
        _sferr "Wrong argument declaration: $a"
    fi
done

# Check if at least one positional argument is set if 'sfparr' is used
[ "$sfparr" == true ] && [ "${#_sfpargs[@]}" == 0 ] && _sferr "At least one positional argument must be used with 'sfparr'"

# Parse examples
for e in "${sfexamples[@]}"; do

    # Get amount of ;
    _sfsubst=${e//";"}
    _sfcount="$(((${#e} - ${#_sfsubst})))"

    if [ $_sfcount -eq 1 ]; then

        # Read example
        read -r -a _sfparsearr <<< "${e}"

        _sfexamples="$_sfexamples  ${_sfparsearr[0]};${_sfparsearr[1]}\n"
    else
        _sferr "Wrong example declaration: $e"
    fi
done

IFS=$OLDIFS

# Usage function
function _sfusage {
    echo -n "Usage: $(basename "$0") [OPTIONS]"
    echo -ne "$_sfphead"
    [ "$sfparr" == true ] && echo -n " ..."
    echo
    [ -n "${sfdesc}" ] && echo -e "\n$sfdesc"
    if [ "$_sfpdesc" != "" ]; then
        echo -e "\nPOSITIONAL ARGUMENTS"
        echo -e "$_sfpdesc" | column -c 80 -s ";" -t -W 2
    fi
    if [ "$_sfodesc" != "" ]; then
        echo -e "\nOPTIONS"
        echo -e "$_sfodesc" | column -c 80 -s ";" -t -W 2
    fi
    if [ "$_sfexamples" != "" ]; then
        echo -e "\nEXAMPLES"
        echo -e "$_sfexamples" | column -c 80 -s ";" -t -W 2
    fi
    if [ -n "${sfextra}" ]; then
        echo -e "\n$sfextra"
    fi
    exit 0
}

# Check for help flag
for a in "$@"; do
    # Check if help flag ist set
    [ "$a" == "-h" ] || [ "$a" == "--help" ] && _sfusage
done

# Parse arguments
while (( "$#" )); do

    # Check if flag
    if [ -n "${_sfflags["$1"]}" ]; then
        declare "${_sfflags["$1"]}"=true

    # Check if argument
    elif [ -n "${_sfargs["$1"]}" ]; then

        # Check if argument has value
        if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
            declare "${_sfargs["$1"]}"="$2"
            shift
        else
            sferr "Argument for '$1' missing"
        fi

    # Handle positional arguments and wrong arguments/flags
    else
        # Check if arg starts with -
        if [ "${1:0:1}" == "-" ]; then
            sferr "Unsupported argument: $1"
        else
            # Set positional argument
            if [ "${#_sfpargs[@]}" != 0 ]; then
                declare "${_sfpargs[0]}"="$1"
                [ "$sfparr" == true ] && _sfplast="${_sfpargs[0]}" && _sfparr=("$1")
                _sfpargs=("${_sfpargs[@]:1}")
            elif [ "$sfparr" == true ]; then
                _sfparr+=("$1")
            else
                sferr "Too many positional arguments"
            fi
        fi
    fi
    shift
done

# Parse additional arguments if 'sfparr' is set
[ "$sfparr" == true ] && [ "${#_sfparr[@]}" -ge 1 ] && read -r -a "${_sfplast?}" <<< "${_sfparr[@]}"

# Check if positional arguments left
if [ "$sfparr" != true ] && [ "${#_sfpargs[@]}" -ge 1 ]; then
    for p in "${_sfpargs[@]}"; do
        sferr "Positional argument '$p' missing" 0
    done
    exit 1
fi

# Unset all internal variables and functions
unset a e _sfargs _sferr _sfexamples _sfflags _sfodesc _sfpargs _sfparr _sfpdesc _sfphead _sfplast _sfusage
